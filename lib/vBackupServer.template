init(NAME,SUBNET,PREFIX,COUNTER,OSTYPE,LDATA,ADMINCRED,CLIENTS,PWREUSE,REUSECHANCE,POOL,SMBCREDS,LOCAL,OSVULNS,HOSTVULNS,OSPARAMS,PARAMSAPP,APPVULNS,NRWKT,PRWKT);

$curIp$=$PREFIX$;
$curIp$+=$COUNTER$;
$dnsname$=$NAME$;
$dnsname$+=".";
$dnsname$+=$SUBNET$;
ipaddress tmpIp=new ipaddress($dnsname$,$curIp$);

string name=$NAME$;
interface myInterfaces=new interface($SELF$.tmpIp);
string type=$SUBNET$.type;
$osname$=$NAME$;
$osname$+="Os";
$appname$=$NAME$;
$appname$+="App";
subnet belongsToSubnet=$SUBNET$;
string cpu="virtual";
string canBeMigrated="true";
if($HOSTVULNS$ != none){
  string[] hasVuln=$HOSTVULNS$;
};
if($POOL$ != none){
  string migrationPool=$POOL$;
};

if($OSTYPE$ == windows){
  os os=new osWindows($osname$,$SELF$.myInterfaces,none,"admin",$OSVULNS$,$OSPARAMS$,$NRWKT$,$PRWKT$);
};
if($OSTYPE$ == ubuntu){
  os os=new osUbuntu($osname$,$SELF$.myInterfaces,none,"admin",$OSVULNS$,$OSPARAMS$,$NRWKT$,$PRWKT$);
};

string os.parameters="remoteShell";

application os.applications=new appBackupServer($appname$,$SELF$.myInterfaces,$APPVULNS$,$PARAMSAPP$);
if($ADMINCRED$ != none){
  credential[] os.applications.acceptedCredentials=$ADMINCRED$;
  username os.applications.admin=$ADMINCRED$.username;
  credential[] os.applications.tmpAdminCred=$ADMINCRED$;
//  usefulData[] os.dataStored=$ADMINCRED$;
};
// TODO, hier muss noch ein else hin, damit ggf erzeugt wird


for($finCL$ in $CLIENTS$){
  node tmp$finCL$Backup$COUNTER$=$finCL$;
  node os.applications.clients=$finCL$;
  ipaddress os.applications.dataStored=$finCL$.tmpIp;

  if($PWREUSE$ == "true"){
    $mode$=$PROB(["reuse","create"],[$REUSECHANCE$])$;
    if($mode$ == "reuse"){
      credential tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred=new credential("backup$COUNTER$$finCL$cred",$SELF$.tmp$finCL$Backup$COUNTER$.os.tmpInitCred.username.value,$SELF$.tmp$finCL$Backup$COUNTER$.os.tmpInitCred.password.value,"user",0,0);
      string tmp$finCL$Backup$COUNTER$.backupCredReuse="ja";
    };
    if($mode$ != "reuse"){
      credential tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred=new credential("backup$COUNTER$$finCL$cred","backup$COUNTER$$finCL$user","backup$COUNTER$$finCL$pw","user",0,0);
      string tmp$finCL$Backup$COUNTER$.backupCredReuse="nein";
    };
  };
  if($PWREUSE$ != "true"){
    credential tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred=new credential("backup$COUNTER$$finCL$cred","backup$COUNTER$$finCL$user","backup$COUNTER$$finCL$pw","user",0,0);
    string tmp$finCL$Backup$COUNTER$.backupCredReuse="nein";
  };

  credential tmp$finCL$Backup$COUNTER$.os.dataStored=$SELF$.tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred;

  ipaddress tmp$finCL$Backup$COUNTER$.os.dataStored=$SELF$.tmpIp;

  credential[] os.applications.acceptedCredentials=$SELF$.tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred;

  fwallow tmp$finCL$Backup$COUNTER$.os.communicationRules=new fwallow([$finCL$.myInterfaces.ipAddress,$SELF$.tmpIp],["443"]);
// now the data duplication from clients to backupServer
  usefulData os.applications.dataLinked=$finCL$.os.dataStored;
  usefulData os.applications.dataLinked=$finCL$.os.applications.dataStored;
// also set ownership TODO should definitely be repeated at later point in time
  username tmp$finCL$Backup$COUNTER$.os.dataStored.owner=$SELF$.tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred.username;
  username tmp$finCL$Backup$COUNTER$.os.applications.dataStored.owner=$SELF$.tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred.username;
};

// dieses setting der ownership stellt sicher, dass der backup-admin auf alles daten zugriff hat
username os.applications.dataLinked.owner=$SELF$.os.applications.admin;

// das hier sollte über kurz oder lang gar nicht nötig sein und kann wieder raus. die usefuldata im backupserver stammen ja einzig aus den clients
if($LDATA$ != none){
  for($ITEM$ in $LDATA$){
    $finCL$=$PROB($CLIENTS$)$;

    usefulData tmp$ITEM$=$ITEM$;

    username tmp$ITEM$.owner=$SELF$.tmp$finCL$Backup$COUNTER$.tmpBackup$COUNTER$cred.username;
    username tmp$ITEM$.owner=$SELF$.os.applications.admin;
    usefulData os.applications.dataLinked=$ITEM$;
  };
};

$smbUname$="smbBack$COUNTER$Uname";
$smbUname$+=$SUBNET$;
$smbPw$="smbBack$COUNTER$Pw";
$smbPw$+=$SUBNET$;

if($SMBCREDS$ != none){
  credential tmpLinkCreds=$SMBCREDS$;
  usefulData[] os.applications.dataStored=$SMBCREDS$;
};
if($SMBCREDS$ == none){
  if($LOCAL$ == "create"){
    credential tmpLinkCreds=new credential($smbUname$,$smbUname$,$smbPw$,"admin",$NRWKT$,$PRWKT$);
  };
  usefulData[] os.applications.dataStored=$SELF$.tmpLinkCreds;
};

//$LOCAL$="local";

if($LOCAL$ == "local"){
// here comes the instance of the sql server within the same node
  string weLocal="ja";
  usefulData[] os.applications.dataStored=$SELF$.os.applications.dataLinked;
};
